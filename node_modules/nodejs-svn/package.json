{
  "_args": [
    [
      {
        "raw": "nodejs-svn",
        "scope": null,
        "escapedName": "nodejs-svn",
        "name": "nodejs-svn",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "D:\\nodesvn"
    ]
  ],
  "_cnpm_publish_time": 1511263297367,
  "_from": "nodejs-svn",
  "_hasShrinkwrap": false,
  "_id": "nodejs-svn@1.1.2",
  "_location": "/nodejs-svn",
  "_nodeVersion": "8.6.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/nodejs-svn-1.1.2.tgz_1511263297256_0.6451671710237861"
  },
  "_npmUser": {
    "name": "omelette",
    "email": "yangbo_9@163.com"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "nodejs-svn",
    "scope": null,
    "escapedName": "nodejs-svn",
    "name": "nodejs-svn",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "http://registry.npm.taobao.org/nodejs-svn/download/nodejs-svn-1.1.2.tgz",
  "_shasum": "8a9c6e18871179965a18263ac6f52a3d2f50db86",
  "_shrinkwrap": null,
  "_spec": "nodejs-svn",
  "_where": "D:\\nodesvn",
  "author": {
    "name": "Ooomelette",
    "email": "yangbo_9@163.com"
  },
  "bugs": {
    "url": "https://github.com/Ooomelette/nodejs-svn/issues"
  },
  "dependencies": {
    "xml2json": "^0.11.0"
  },
  "description": "a version controller",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "8a9c6e18871179965a18263ac6f52a3d2f50db86",
    "size": 4508,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/nodejs-svn/download/nodejs-svn-1.1.2.tgz"
  },
  "gitHead": "fd2fbc535859a1d1a4cc3b6701d8440d650a6372",
  "homepage": "https://github.com/Ooomelette/nodejs-svn#readme",
  "keywords": [
    "svn",
    "subversion",
    "node",
    "svn interface"
  ],
  "license": "ISC",
  "main": "./src/index.js",
  "maintainers": [
    {
      "name": "omelette",
      "email": "yangbo_9@163.com"
    }
  ],
  "name": "nodejs-svn",
  "optionalDependencies": {},
  "publish_time": 1511263297367,
  "readme": "\n\n# nodejs-svn\nnodejs-svn是svn在nodejs中的实现，旨在用nodejs控制版本，我用于线上的自动化构建工具。它由2部分组成，svnjs和indexjs，svnjs是nodejs实现svn的核心，它只包含核心的方法。相对独立。indexjs是对svn命令行的扩展，封装了一些常用的api。该库由es6的class编写，你可以根据自己的喜好和需求重新进行封装，当然这个要求你对[svn命令行](http://www.riaoo.com/subpages/svn_cmd_reference.html)有一定的了解。\n\n\n# Install\n\n\n```code\n  npm install nodejs-svn -S\n  \n```\n\n\n# Usage\n\n```code\n    var SVN = require('node-svn');\n    var svn = new SVN({\n        username: '你的svn用户名',\n        passwork: '你的svn密码',\n    \troot: '你的svn路径，就是trunk和branches的路径',\n    \tdebug: true, // 是否在控制台打印调试信息\n    \tcwd: path.resolve(__dirname, './'), //仓库存放的目录\n    \trepoName: 'zyb_front', //仓库name\n    });\n```\n\n在new svn的时候，需要传入config对象，这个对象是必须的，其中svn的命令是在你填写的repoName中执行，如果您有额外的需求，可以使用通用方法command（），它是svn的核心方法。\n\n在初始化之后，你就可以进行svn操作了\n\n比如： \n\n```code\n    svn.commit('-m \"这是描述文本\"', (err, res) => {\n\t\tconsole.log('成功后的回掉函数！')\n\t})\n```\n\n\n# API\n\n- callback\n统一的回掉，这个回掉函数会传入2个参数，err和res， err存在于，res是执行命令subversion命令返回的结果\n\n\n- svn.commit('-m \"descript\"', callback)\n接收2两个参数，第一个参数是-m操作符和提交描述，中间必须用“空格”隔开，第二个参数为执行命令后的回掉\n\n```code\n    eg： \n        svn.commit('-m \"descript\"', callback)\n        \n```\n\n\n- svn.info(branches，callback)\n接收最多2个参数，第一个参数是分支信息（可以为远端信息，也可以是本地库信息，不传默认本地库信息并且在root + repoName 目录下），第二个参数是回掉函数。\n\n```code\n    eg： \n        svn.info(callback);\n    \tsvn.info('svn://test/repo', callback)\n    \tsvn.info(path.resolve(__dirname, './'), callback)\n```\n\n- svn.checkout\n接受2个参数，第一个是必须参数->分支，第二个参数是回掉函数->callback,分支检出在repoName文件夹下，目录为cwd\n\n```code\n    eg: \n    svn.checkout('branches/test-branches', callback)\n\tsvn.checkout('trunk', (err, data) => {})\n```\n\n\n\n- svn.list\n接收最多2个参数，第一个参数是分支信息（可以为远端信息，也可以是本地库信息，不传默认本地库信息并且在root + repoName 目录下），第二个参数是回掉函数。\n\n```code\n    eg： \n        svn.list(callback);\n    \tsvn.list('svn://test/repo', callback)\n    \tsvn.list(path.resolve(__dirname, './'), callback)\n\n```\n\n\n- svn.switch\n接收最多2个参数，第一个参数是需要切换的分支名字，第二个参数是回掉函数。\n\n```code\n    eg： \n        svn.switch('trunk');\n    \tsvn.list('branches/test', callback)\n\n```\n\n\n- svn.cleanup\n接收最多1个回掉函数。\n\n```code\n    eg： \n        svn.cleanup(callback);\n\n```\n\n\n## 核心方法\n- svn.command()\n接受一个options对象，这个对象会对象包含以下信息：\n\n```code\n    options： {\n        command: '', // 需要执行的命令 比如：switch\n        args: [], // 执行svn命令的参数，比如： list --xml --username xxx --user password ***\n        options: { // 运行spawn的一些参数，具体可参考nodejs文档\n            cwd: path.resolve(this.cwd, this.repoName) //执行command所在的目录\n        }\n    }\n```\n\n\n\n# 注意\n路径是字符串相加，请保证路径的正确性，特别注意root和branches的路径组合，路径请使用相对于root的路径\nnodejs参考文档： http://nodejs.cn/api/child_process.html#child_process_child_process_spawn_command_args_options\n\n\n## 后记\n如果你还满意，不妨给我一颗star，这将成为我的动力！ths！\n\n\n\n\n\n\n\n\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Ooomelette/nodejs-svn.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "1.1.2"
}
